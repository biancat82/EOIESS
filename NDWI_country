import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from geopy.geocoders import Nominatim

def contrast_stretch(im):
    in_min = np.percentile(im, 5)
    in_max = np.percentile(im, 95)

    out_min = 0.0
    out_max = 255.0

    out = im - in_min
    out *= ((out_min - out_max) / (in_min - in_max))
    out += in_min

    return out

# Directory path containing NIR images
directory = '/Users/jacopobiancat/OneDrive - Istituto Europeo di Studi Superiori/Astro-PI-22_23/EO_IESS'

# Path to the CSV file containing latitude and longitude information
csv_file = '/Users/jacopobiancat/Documents/Scuola/Astro-PI-22-23/data_with_countries.csv'

# Initialize geocoder
geolocator = Nominatim(user_agent='my_app')

# Read the CSV file
data = pd.read_csv(csv_file)

# Initialize lists to store water indices and country names
water_indices = []
cloud_indices = []
countries = data['Country']

# Loop through each file in the directory
for file in sorted(os.listdir(directory)):
    if file.endswith('.jpg'):
        # Read the NIR image
        image_path = os.path.join(directory, file)
        nir_image = cv2.imread(image_path)
        grey_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

        nir_image_contrasted = contrast_stretch(nir_image)
        grey_image_contrasted = contrast_stretch(grey_image)

        # Calculate the cloud index
        # Apply adaptive thresholding to segment potential cloud pixels
        _, thresholded_image = cv2.threshold(grey_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        # Convert the thresholded image to binary format
        cloud_mask = np.where(thresholded_image > 0, 255, 0).astype(np.uint8)
        # Perform morphological operations to refine the cloud mask
        kernel = np.ones((3, 3), np.uint8)
        cloud_mask = cv2.morphologyEx(cloud_mask, cv2.MORPH_OPEN, kernel)
        # Calculate the cloud cover percentage
        total_pixels = cloud_mask.size
        cloud_pixels = np.count_nonzero(cloud_mask)
        cloud_cover_percentage = (cloud_pixels / total_pixels) * 100
        # Create an index indicating the quantity of clouds
        cloud_index = cloud_cover_percentage / 100
        # Append the cloud index and image name to the respective lists
        cloud_indices.append(cloud_index)

        # Calculate the NDWI
        green_band = nir_image_contrasted[:, :, 1].astype(np.float32)
        nir_band = nir_image_contrasted[:, :, 2].astype(np.float32)
        
        # Check for zero denominators
        denominator = green_band + nir_band
        denominator[denominator == 0] = np.nan  # Replace zeros with NaN

         # Calculate the average NDWI for the image
        ndwi = (green_band - nir_band) / denominator
        
        average_ndwi = np.nanmean(ndwi)  # Ignore NaN values when calculating mean
        water_indices.append(average_ndwi)

# Create a dataframe with the cloud indices, water indices, and country names
df = pd.DataFrame({'Country': countries, 'Cloud Coverage': cloud_indices, 'Water Index': water_indices})

# Filter the dataframe based on the cloud coverage threshold
cloud_coverage_threshold = 0.5
filtered_df = df[df['Cloud Coverage'] < cloud_coverage_threshold]

# Calculate the average water index per country
average_water_index = filtered_df.groupby('Country')['Water Index'].mean()

# Plot the average water index per country
plt.figure(figsize=(10, 6))
average_water_index.plot(kind='bar', edgecolor='black', alpha=0.7)
plt.xlabel('Country')
plt.ylabel('Average Water Index')
plt.title('Average Water Index per Country (Cloud Coverage < {})'.format(cloud_coverage_threshold))
plt.tight_layout()
plt.show()